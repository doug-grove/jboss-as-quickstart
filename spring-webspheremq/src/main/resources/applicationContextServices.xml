<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/jms		http://www.springframework.org/schema/context/spring-jms-3.0.xsd
    http://www.springframework.org/schema/aop 		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- enable annotations -->
	<context:annotation-config />

	<!-- process annotated beans -->
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<!-- ************************************** -->
	<!-- Out-bound Connection Factory and Queue -->
	<!-- ************************************** -->

	<!-- a IBM MQ queue from JNDI -->
	<bean id="mqSendQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:jboss/mqGSS</value>
		</property>
	</bean>

	<!-- a IBM MQ Connection Factory from JNDI -->
	<bean id="mqSendConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:jboss/mqConnectionFactory</value>
		</property>
	</bean>

	<!-- A Spring caching connection factory

SingleConnectionFactory subclass that adds javax.jms.Session caching as well 
 javax.jms.MessageProducer caching. This ConnectionFactory also switches the "reconnectOnException" 
 property to "true" by default, allowing for automatic recovery of the underlying Connection. 

By default, only one single Session will be cached, with further requested Sessions being created and 
 disposed on demand. Consider raising the "sessionCacheSize" value in case of a high-concurrency 
 environment. 

NOTE: This ConnectionFactory decorator requires JMS 1.1 or higher. You may use it through the JMS 1.0.2 
 API; however, the target JMS driver needs to be compliant with JMS 1.1. 

When using the JMS 1.0.2 API, this ConnectionFactory will switch into queue/topic mode according to the 
 JMS API methods used at runtime: createQueueConnection and createTopicConnection will lead to queue/
 topic mode, respectively; generic createConnection calls will lead to a JMS 1.1 connection which is able to 
 serve both modes. 

NOTE: This ConnectionFactory requires explicit closing of all Sessions obtained from its shared 
 Connection. This is the usual recommendation for native JMS access code anyway. However, with this 
 ConnectionFactory, its use is mandatory in order to actually allow for Session reuse. 

Note also that MessageConsumers obtained from a cached Session won't get closed until the Session will 
 eventually be removed from the pool. This may lead to semantic side effects in some cases. For a durable 
 subscriber, the logical Session.close() call will also close the subscription. Re-registering a durable 
 consumer for the same subscription on the same Session handle is not supported; close and reobtain a 
 cached Session first. 

Author:
	Juergen Hoeller
Since:
	2.5.3
	
	-->
    <bean id="springCachingConnectionFactoryEDS" class="org.springframework.jms.connection.CachingConnectionFactory">
        <property name="targetConnectionFactory" ref="wmqFactoryEDS"/>
        <property name="cacheConsumers" value="true"/>
        <property name="cacheProducers" value="true"/>
        <property name="sessionCacheSize" value="10"/>
    </bean>

	<!-- *********************************** -->
	<!-- In-bound Message Driven Components -->
	<!-- *********************************** -->

	<!-- this is the Message Driven POJO (MDP) -->
	<bean id="messageDrivenPOJO" class="org.jboss.as.quickstarts.spring_mq.MessageDrivenPOJO">
		<!-- provide the two components for out bound messaging -->
		<property name="queue" ref="mqSendQueue" />
		<property name="connectionFactory" ref="mqSendConnectionFactory" />
	</bean>

	<!-- The IBM MQ Resource Adapter -->
	<bean id="mqResourceAdapter"
		class="org.springframework.jca.support.ResourceAdapterFactoryBean">
		<property name="resourceAdapter">
			<bean class="com.ibm.mq.connector.ResourceAdapterImpl">
				<property name="connectionConcurrency" value="5" />
				<property name="maxConnections" value="10" />
			</bean>
		</property>
		<property name="workManager">
			<bean class="org.springframework.jca.work.SimpleTaskWorkManager" />
		</property>
	</bean>

	<!-- Configure the messaging end point -->
	<bean
		class="org.springframework.jms.listener.endpoint.JmsMessageEndpointManager">
		<property name="resourceAdapter" ref="mqResourceAdapter" />
		<property name="activationSpec">
			<bean class="com.ibm.mq.connector.inbound.ActivationSpecImpl">
				<!-- do not use JNDI - use names as specified in IBM MQ -->
				<property name="useJNDI" value="false" />
				<!-- queue name as defined in IBM MQ -->
				<property name="destination" value="GSS.QUEUE" />
				<property name="destinationType" value="javax.jms.Queue" />
				<property name="hostName" value="10.0.0.124" />
				<property name="port" value="1414" />
				<property name="channel" value="SYSTEM.DEF.SVRCONN" />
				<property name="transportType" value="CLIENT" />
<!-- as needed 
				<property name="username" value="testUser"/> 
				<property name="password" value="testPassword"/> 
-->
			</bean>
		</property>
		<property name="messageListener" ref="messageDrivenPOJO" />
	</bean>
</beans>
